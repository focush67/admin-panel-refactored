generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  username          String     @unique
  imageUrl          String?
  externalUserId    String     @unique
  productsAdded     Product[]  @relation("products")
  categoriesCreated Category[] @relation("categories")
  ordersCreated     Order[]    @relation("ordersCreated")
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Category {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  creatorId        String    @db.ObjectId
  creator          User      @relation("categories", fields: [creatorId], references: [id], onDelete: Cascade)
  name             String
  cover            String
  categoryProducts Product[] @relation("categoryProducts")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([name])
}

model Property {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation("properties", fields: [productId], references: [id], onDelete: Cascade)
  name      String
  value     String
}

model Product {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  ownerId         String     @db.ObjectId
  owner           User       @relation("products", fields: [ownerId], references: [id], onDelete: Cascade)
  name            String     @unique
  description     String
  price           Float      @default(0.0)
  categoryId      String     @db.ObjectId
  productCategory Category   @relation("categoryProducts", fields: [categoryId], references: [id], onDelete: Cascade)
  photos          Photo[]    @relation("photos")
  properties      Property[] @relation("properties")
  orderedBy       Order[]    @relation("orders")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([categoryId])
}

model Photo {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation("photos", fields: [productId], references: [id], onDelete: Cascade)
  url       String
}

model Order {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  creatorId      String  @db.ObjectId
  creator        User    @relation("ordersCreated", fields: [creatorId], references: [id], onDelete: Cascade)
  productId      String  @db.ObjectId
  orderedProduct Product @relation("orders", fields: [productId], references: [id], onDelete: Cascade)
  address        String
  phone          String
}

model CartItem {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String @unique
  price      Float  @default(0.0)
  coverPhoto String
  quantity   Int
}
